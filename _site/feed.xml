<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://www.erickenney.io/Blog/</link>
    <atom:link href="http://www.erickenney.io/Blog//feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <pubDate>Sat, 11 Feb 2017 22:54:08 +0000</pubDate>
    <lastBuildDate>Sat, 11 Feb 2017 22:54:08 +0000</lastBuildDate>

    
    
    <item>
      <title>Programming - The Next Blue Collar Profession</title>
      <link>http://www.erickenney.io/Blog//2017/02/11/2017-02-11-blue-collar-coding/</link>
      <pubDate>Sat, 11 Feb 2017 22:54:08 +0000</pubDate>
      <author></author>
      <guid>http://www.erickenney.io/Blog//2017/02/11/2017-02-11-blue-collar-coding</guid>
      <description>&lt;h2 id=&quot;programming---the-next-blue-collar-profession&quot;&gt;Programming - The Next Blue Collar Profession&lt;/h2&gt;

&lt;p&gt;I am a strong believer that the mythos of the lone programmer genius is harmful to the future of the coding profession. Plenty of smart, logical thinkers that would thrive as developers never even give it a shot because they don’t see themselves fitting the mold. I am also optimistic that this barrier is being broken down by the increased access to things like code schools, which put coding in a field along with other trades learned from vocational schools. This is good! And as that barrier deteriorates, more and more people who will never be able to work on machine learning or writing new compression algorithms will be put in positions to maintain a page on a company’s site. And that’s fine! That can be a good middle-class job. &lt;/p&gt;

&lt;p&gt;Of course the next fear that arises along with any blue collar boom is the replacement of those positions with automation. And most likely, that will be the case. And that’s also fine! If programming can provide millions of people with good middle class jobs for the next handful of decades, that’s good enough. Expecting anything else has become unreasonable. &lt;/p&gt;

&lt;p&gt;So please, give this a read and let me know if you have any thoughts on it. But I personally could not agree more.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wired.com/2017/02/programming-is-the-new-blue-collar-job/&quot;&gt;The Next Big Blue-Collar Job Is Coding&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>WebdriverIO - Modularizing Test Specs for Reusability</title>
      <link>http://www.erickenney.io/Blog//2017/02/11/2016-12-15-webdriverio-spec-modularization/</link>
      <pubDate>Sat, 11 Feb 2017 22:38:17 +0000</pubDate>
      <author></author>
      <guid>http://www.erickenney.io/Blog//2017/02/11/2016-12-15-webdriverio-spec-modularization</guid>
      <description>&lt;h1 id=&quot;webdriverio---modularizing-test-specs-for-reusability&quot;&gt;WebdriverIO - Modularizing Test Specs for Reusability&lt;/h1&gt;

&lt;p&gt;At work, we have a whole lot of test cases. If you were to try to test every combination of options across every device and browser, you’d be looking at tens of thousands of individual tests. In an attempt to make this less painful, we’ve been moving towards automation using WebdriverIO and BrowserStack. When designing our test framework, we had a few basic requirements:
- Specs should be agnostic to the page they are testing
- Specs should be reusable across test cases
- The suite should accept an array of test inputs over which it can iterate. This allows for one test suite to be reusable for all of our test input combinations.
- The &lt;a href=&quot;http://martinfowler.com/bliki/PageObject.html&quot;&gt;page object&lt;/a&gt; should be the only thing that needs changing when testing a new product.&lt;/p&gt;

&lt;p&gt;In order to meet these goals, we ended up sort of crafting a new framework with a clear file structure and easy re-use of specs and assertions across test cases. So let’s take a look…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Most of our testing is based around video ad playback. This includes playing, pausing, click-thru, etc. This framework is especially conducive to that sort of feature testing, but could easily be expanded to any WebdriverIO use case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;

&lt;p&gt;First I’ll explain the directory structure used and then go into what each portion does. The basic structure looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Project
│   README.md
│   file001.txt    
│
└───assertions
│   │   file011.txt
│   │   file012.txt
│   │
│   └───subfolder1
│       │   file111.txt
│       │   file112.txt
│       │   ...
│   
└───bundles
    │   file021.txt
    │   file022.txt
&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>WebdriverIO - Testing Pages With Multiple/Nested IFrames</title>
      <link>http://www.erickenney.io/Blog//2016/12/14/2016-12-14-webdriverio-frame-selection/</link>
      <pubDate>Wed, 14 Dec 2016 21:22:30 +0000</pubDate>
      <author></author>
      <guid>http://www.erickenney.io/Blog//2016/12/14/2016-12-14-webdriverio-frame-selection</guid>
      <description>&lt;h1 id=&quot;webdriverio---testing-pages-with-multiplenested-iframes&quot;&gt;WebdriverIO - Testing Pages With Multiple/Nested IFrames&lt;/h1&gt;

&lt;p&gt;WebdriverIO is an incredible tool that allows for Selenium Webdriver testing using Javascript. This makes writing tests feel much more familiar to many of the people that this tool is intended for - web developers. And unfortunately, WebdriverIO doesn’t always play well with another common item in web developement - the IFrame. Similar to JavaScript, WebdriverIO queries/commands are limited in scope to the current frame, so here are some methods we’ve come up with for improving cooperation between WebdriverIO and IFrames.&lt;/p&gt;

&lt;h2 id=&quot;hostile-frames&quot;&gt;Hostile Frames&lt;/h2&gt;

&lt;p&gt;First off&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Design Patterns in Ruby - The Abstract Factory</title>
      <link>http://www.erickenney.io/Blog//2016/05/11/2016-04-04-design-patterns-abstract-factory/</link>
      <pubDate>Wed, 11 May 2016 21:32:57 +0000</pubDate>
      <author></author>
      <guid>http://www.erickenney.io/Blog//2016/05/11/2016-04-04-design-patterns-abstract-factory</guid>
      <description>&lt;h2 id=&quot;the-pattern&quot;&gt;The Pattern&lt;/h2&gt;
&lt;p&gt;There are 2 important parts of Abstract Factory pattern. The first is &lt;strong&gt;The Factory&lt;/strong&gt; itself. This separates the client from possibly many sub-types of factories. The second is &lt;strong&gt;The Product&lt;/strong&gt;, which also needs to be abstract so that no matter which sub-type of factory is being used, the end products need to all look the same as far as the client is concerned. So when a &lt;em&gt;Map Factory&lt;/em&gt; can create a &lt;em&gt;Treasure Map&lt;/em&gt;, a &lt;em&gt;Star Map&lt;/em&gt; or a &lt;em&gt;Trail Map&lt;/em&gt;, it still needs to look like just a &lt;em&gt;Map&lt;/em&gt; to the client.&lt;/p&gt;

&lt;h3 id=&quot;the-factory&quot;&gt;The Factory&lt;/h3&gt;
&lt;p&gt;The Abstract Factory pattern is used to isolate the client from the possibly large number and variety of products in an application. We’ll use the example of a video player. The abstract &lt;em&gt;VideoPlayerFactory&lt;/em&gt; class is aware of each sub-type of video player factory and each factory method that those sub-types contain. These factory methods could include &lt;code&gt;make_mute_button&lt;/code&gt;, &lt;code&gt;make_progress_bar&lt;/code&gt;, and &lt;code&gt;make_volume_slider&lt;/code&gt;. Every sub-type of factory would implement each of these functions differently, and the abstract factory doesn’t care. The sub-types of video player factories could be &lt;em&gt;AdVideoPlayerFactory&lt;/em&gt;, &lt;em&gt;ChristmasThemeVideoPlayerFactory&lt;/em&gt; or &lt;em&gt;StreamingVideoPlayerFactory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Even though each factory sub-type inherits from the abstract factory, each sub-type should have different behaviors and appearances for things like the mute button and progress bar. For example, the streaming video player’s progress bar might show that it’s always at the end of the video, but allow users to seek to previous parts of the stream. So each sub-type would implement the factory methods differently. The client doesn’t need to know this though. All they need to be able to do is tell the &lt;em&gt;VideoPlayerFactory&lt;/em&gt; that they would like a video player to be made, and tell it what kind it should be. &lt;/p&gt;

&lt;h3 id=&quot;the-products-mute-buttonscroll-baretc&quot;&gt;The Products (mute button/scroll bar/etc.)&lt;/h3&gt;

&lt;p&gt;With this pattern, not only should the client not need to worry about the different types of factories being used; he/she should also not care about what the results products look like. In order to achieve this, the products should also inherit from abstract products that the client knows about. For example, the &lt;em&gt;StreamingVideoPlayerFactory&lt;/em&gt; will probably create a &lt;em&gt;StreamingProgressBar&lt;/em&gt;. This should inherit from the &lt;em&gt;ProgressBar&lt;/em&gt; class, just like each of the other types of progress bars. The client only knows about this abstract class. This way, the client should not need to make any changes to their program when they decide to use a &lt;em&gt;ChristmasThemeVideoPlayer&lt;/em&gt; instead. All they need to do is tell the abstract factory to change which sub-type it creates. In the end, the mute button, scroll bar, and volume slider all function the same way as far as the client is concerned, regardles of video player type.&lt;/p&gt;

&lt;h2 id=&quot;abstract-factory-in-ruby&quot;&gt;Abstract Factory in Ruby&lt;/h2&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Error Catching in Ansible</title>
      <link>http://www.erickenney.io/Blog//2015/02/20/handling-ansible-errors/</link>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.erickenney.io/Blog//2015/02/20/handling-ansible-errors</guid>
      <description>&lt;h2 id=&quot;error-catching-in-ansible&quot;&gt;Error Catching in Ansible&lt;/h2&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;So what if you want to write an Ansible script that requires you to shut down Apache at the beginning, run the rest of your commands and then restart Apache at the end and one of your commands fails in the middle? This leaves you with your a failed script and Apache still stopped.&lt;/p&gt;

&lt;p&gt;This is a problem if you are trying to quickly make an update and can’t be taking down a server indefinitely upon failure. The problem is that Ansible doesn’t support an explicit form of try/catch. It only supports the “try” part. So we work with it.&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;/h3&gt;
&lt;p&gt;To fix the problem I had to use &lt;code&gt;ignore_errors&lt;/code&gt;. So I want to shut down Apache, run some Yum commands, and then regardless of the results, restart Apache. I begin by simply shutting down Apache. The next command in my case is to run &lt;code&gt;yum clean all&lt;/code&gt;. This is the first place that failure is possible. So I register the result as the &lt;code&gt;clean_result&lt;/code&gt; variable. This includes the output from running the command, including a boolean regarding whether or not it failed. And finally you want to ignore any errors with &lt;code&gt;ignore_errors: True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So far you’ve got:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;&amp;lt;hosts_names&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;yes&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;shut down apache&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name=apache state=stopped&lt;/span&gt;
   &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;clean all packages&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;yum clean all&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;clean_result&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ignore_errors&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All’s fine and dandy, but what happens if that actually fails? You don’t want to go running &lt;code&gt;yum update&lt;/code&gt; all willy nilly if cleaning failed. So you need to add a conditional to that command. So you add the line &lt;code&gt;when: clean_result | success&lt;/code&gt;. This checks the boolean &lt;code&gt;clean_result.success&lt;/code&gt; that was registered in the &lt;code&gt;clean all packages&lt;/code&gt; task. You could do the opposite with &lt;code&gt;clean_result | failed&lt;/code&gt;. Since you want to start Apache back up regardless of whether or not the packages update, make sure to ignore errors again.&lt;/p&gt;

&lt;p&gt;If you wanted more tasks between updating packages and restarting Apache, you’d also need to register an &lt;code&gt;update_result&lt;/code&gt; variable so you can check for success. Here we don’t need it since we’re jumping straight to restarting Apache.&lt;/p&gt;

&lt;p&gt;Now you’ve got:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;&amp;lt;hosts_names&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;yes&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;shut down apache&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name=apache state=stopped&lt;/span&gt;
   &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;clean all packages&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;yum clean all&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;clean_result&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ignore_errors&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;True&lt;/span&gt;
   &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;update package&lt;/span&gt; 
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;yum&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;state=latest name=&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ignore_errors&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;True&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;clean_result | success&lt;/span&gt;
   &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;start apache&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name=apache state=started&lt;/span&gt;
     &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;apache_restart | bool&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that’s it.&lt;/p&gt;

&lt;h3 id=&quot;the-downsides&quot;&gt;The Downsides&lt;/h3&gt;

&lt;h4 id=&quot;no-counted-failures&quot;&gt;No Counted Failures&lt;/h4&gt;
&lt;p&gt;There is one major downside to this method. You will never have any failures in your results.  It’ll pretty much always look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ok=4   changed=2    unreachable=0    failed=0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each individual task will still print a failure, but if someone unfamiliar with your script were to see the results, they would never know it broke. That task failure will look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;TASK: [update package]
*********************************
failed: [hostname] =&amp;gt; {&amp;quot;changed&amp;quot;: false, &amp;quot;failed&amp;quot;: true, &amp;quot;rc&amp;quot;: 0, &amp;quot;results&amp;quot;: []}
msg: No Package matching &amp;#39;&amp;lt;package-name&amp;gt;&amp;#39; found available, installed or updated&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;what-if-theres-lots-of-tasks&quot;&gt;What If There’s Lots of Tasks?&lt;/h4&gt;
&lt;p&gt;This is clearly just a pain if you have a ton of tasks. It could be simplified by naming all of the registered variables the same thing. Instead of calling it &lt;code&gt;clean_result&lt;/code&gt;, just call it &lt;code&gt;result&lt;/code&gt;. Then you can copy and paste the same &lt;code&gt;register&lt;/code&gt; and &lt;code&gt;when&lt;/code&gt; into each task. &lt;code&gt;result&lt;/code&gt; will be re-written each time with the newest results. It’s not perfect but is manageable.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This is an imperfect solution to a shortcoming of Ansible as it exists now. Sometimes it’s just necessary to keep a server running or to do any other clean up task. Please comment if anyone finds a more ideal solution, as I would love to know it.&lt;/p&gt;

</description>
    </item>
    
    
    
    <item>
      <title>Finding a Rails Model That Has All Associations</title>
      <link>http://www.erickenney.io/Blog//2015/02/10/rails-filter-for-all-associations/</link>
      <pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.erickenney.io/Blog//2015/02/10/rails-filter-for-all-associations</guid>
      <description>&lt;h2 id=&quot;rails-find-models-with-all-associations&quot;&gt;Rails: Find Models with ALL Associations&lt;/h2&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt;
&lt;p&gt;For a project I’m working on, I was trying to build a check-box filter, where each check-box represents a relation in a has_many through association, and each new checked box further reduces the results.&lt;/p&gt;

&lt;p&gt;For example, I’ve got a bunch of hospitals each with a set of features. Each check-box corresponds to a feature, and with each newly checked box, the number of hospitals returned should decrease, only return hospitals with ALL of the matching features.&lt;/p&gt;

&lt;p&gt;I have an app with the following models:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hospital&lt;/li&gt;
  &lt;li&gt;HospitalFeatures&lt;/li&gt;
  &lt;li&gt;Features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;with HospitalFeatures being the join table between the two primary models. Here are the associations:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hospital&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hospital_features&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hospital_features&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HospitalFeature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hospital&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:feature&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Feature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hospital_features&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hospitals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hospital_features&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have a check-box form that lists all of the features available.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;helipad&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Helipad&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_box_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;features[]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;helipad&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;telesurgery&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Telesurgery&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_box_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;features[]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;telesurgery&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;emergency room&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Emergency Room&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_box_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;features[]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;emergency room&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;/h3&gt;
&lt;p&gt;So if you check “helipad” and “telesurgery”, it should return only hospitals with both “helipad” AND “telesurgery” rather than any hospital with either “helipad” OR “telesurgery”.&lt;/p&gt;

&lt;p&gt;When I set out to do this, I assumed it would be trivial in Rails. Turned out not to be the case. Here’s how I got it done.&lt;/p&gt;

&lt;p&gt;First you will need to join your tables…&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;filtered_hospitals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hospital&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, you’ve just got a big table with everything in it.&lt;/p&gt;

&lt;p&gt;So you filter for where the feature name is in the array of searched features:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;filtered_hospitals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hospital&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;features.name in (?)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searched_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where &lt;code&gt;searched_features&lt;/code&gt; is something like &lt;code&gt;[&quot;telesurgery&quot;, &quot;helipad&quot;]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So if you want 2 features, and a hospital has both, you will get 2 copies of that hospital. So you can group on hospital.id&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;filtered_hospitals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hospital&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;features.name in (?)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searched_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hospitals.id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, you will have all the hospitals that had ANY of the searched features rather than ALL of them. To fix that, you make sure that &lt;code&gt;COUNT(*)&lt;/code&gt; is equal to the number of searched features. The final query being:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;filtered_hospitals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hospital&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;features.name in (?)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searched_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hospitals.id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;having&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;COUNT(*) = ?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searched_features&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And there you have it. &lt;code&gt;filtered_hospitals&lt;/code&gt; will be only the hospitals that have an association for every one of the desired features.&lt;/p&gt;

&lt;h3 id=&quot;my-original-attempts&quot;&gt;My Original Attempts&lt;/h3&gt;
&lt;p&gt;If you’re still reading, that means you didn’t just copy and paste that last snippet of code and want to actually learn why more obvious methods might not work. That’s awesome.&lt;/p&gt;

&lt;h4 id=&quot;first-go&quot;&gt;First Go&lt;/h4&gt;
&lt;p&gt;The move obvious and simplest attempt would be something like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;filtered_hospitals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hospital&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searched_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This does the same join as the final solution, but looks for features where &lt;code&gt;feature.name&lt;/code&gt; is in &lt;code&gt;searched_features&lt;/code&gt;. It’s the same as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;filtered_hospitals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hospital&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;features.name in (?)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searched_features&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This does the exact thing I was trying to avoid, which returns any hospital that has ANY searched feature. So adding features increases your number of results rather than narrowing it down.&lt;/p&gt;

&lt;h4 id=&quot;second-go---bad-sql&quot;&gt;Second Go - Bad SQL&lt;/h4&gt;
&lt;p&gt;My next attempt was to work with somewhat more raw SQL. I’d build a query string to evaluate based on each feature in the &lt;code&gt;searched_features&lt;/code&gt; list.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;query_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;features.name = ? AND &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searched_features&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This just repeats “features.name = ? AND” as many times as there are features, and then removes the final AND. Not the cleanest, admittedly. Then I would run the following query:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;filtered_hospitals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hospital&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searched_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This just doesn’t work at all. When you join the hospitals and features table, you end up with multiple rows of the same hospital. One for each associated feature. This query would look for a single row, with all of the features. That’s obviously impossible as each row for a given hospital can only have one feature. Bad attempt.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This is just a query that seems like it would be very common and like Rails would have a built-in query for just this. Turns out that’s not the case and that it’s actually harder to find a clear solution than I expected. Once you see it though, it makes perfect sense and I think this will be a useful pattern to remember down the road.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Why Learning to Code is So Damn Hard</title>
      <link>http://www.erickenney.io/Blog//2015/02/06/why-learning-to-code-is-so-damn-hard/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.erickenney.io/Blog//2015/02/06/why-learning-to-code-is-so-damn-hard</guid>
      <description>&lt;h2 id=&quot;why-learning-to-code-is-so-damn-hard&quot;&gt;Why Learning to Code is So Damn Hard&lt;/h2&gt;

&lt;p&gt;This isn’t actually a blog post as much as just sharing an article I liked. I think most developers, especially those that didn’t take the CS degree route, can relate to this. Particularly that moment that you close down the Codecademy window to start your own project, and within 10 seconds realize you have no idea what the hell is going on.&lt;/p&gt;

&lt;p&gt;I also couldn’t agree more with the fact that no one resource is going to teach you what you need to know. Each of them has glaring holes and a different focus. Only going to be able to fill these gaps by using all of the resources, book, blogs, YouTube tutorials available.&lt;/p&gt;

&lt;p&gt;Enjoy the read.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.vikingcodeschool.com/posts/why-learning-to-code-is-so-damn-hard&quot;&gt;Why Learning to Code is So Damn Hard&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    
    
    
    <item>
      <title>CodeCatatlyst promise-as3 Library</title>
      <link>http://www.erickenney.io/Blog//2015/01/30/promise-as3/</link>
      <pubDate>Fri, 30 Jan 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.erickenney.io/Blog//2015/01/30/promise-as3</guid>
      <description>&lt;h2 id=&quot;codecatalysts-promise-as3-help-i-wish-id-had&quot;&gt;CodeCatalyst’s promise-as3 Help I Wish I’d Had&lt;/h2&gt;

&lt;p&gt;For a project at work recently, we found the need to adapt a promise-driven Javascript file into AS3. After a little bit of research we settled on CodeCatalyst’s promise-as3 library. I say little bit of research because there’s really not very many libraries to look into. And the ones that do exist have little to no documentation. Because of that, I decided to put together things I’ve found useful for my own and others’ benefit.&lt;/p&gt;

&lt;h3 id=&quot;starting-with-promise-as3&quot;&gt;Starting with promise-as3&lt;/h3&gt;

&lt;p&gt;One thing to note about promise-as3’s implementation of promises, is that you need to instantiate a Deferred object from which you will pull a Promise object. You can not create a promise directly.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-as3&quot; data-lang=&quot;as3&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deferred&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Deferred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Deferred&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is different from JS’s built-in promises, which bypass deferreds entirely. The reason for this separation of power is so that you are able to return the promise object and allow the promise to be passed around while maintaining control of when and how the &lt;code&gt;Deferred&lt;/code&gt; is resolved/rejected. Whatever function receives the promise can add &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;otherwise&lt;/code&gt; callbacks/errbacks and you maintain control of deferred. Which leads me to the next topic.&lt;/p&gt;

&lt;h3 id=&quot;adding-fulfill-and-reject-functions-callback-and-errback&quot;&gt;Adding fulfill and reject functions (callback and errback)&lt;/h3&gt;

&lt;p&gt;In the new JS implementation of promises, the promise constructor takes a function as a parameter. That function itself takes &lt;code&gt;fulfill&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; functions as arguments. It would look something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doSomethingAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fulfill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Timeout&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;doSomethingAsync&lt;/code&gt; creates a new promise. On construction, the promise is passed the fulfill and reject functions (defined elsewhere).&lt;/p&gt;

&lt;p&gt;This is not how it is done with the promise-as3 library. Instead, you instantiate a &lt;code&gt;Deferred&lt;/code&gt;, passing no arguments. You extract the promise associated with the deferred. That promise can then be returned and made available to outside functions/classes (the consumer).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-as3&quot; data-lang=&quot;as3&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;doSomethingAsync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deferred&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Deferred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Deferred&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Of course it timed out&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At that point, it is up to the consumer to add callbacks and errbacks.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-as3&quot; data-lang=&quot;as3&quot;&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myPromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomethingAsync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;www.url.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;myPromise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// traces &amp;quot;Of course it timed out&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;That promise must have worked!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, the errback will always be called because &lt;code&gt;doSomethingAsync&lt;/code&gt; just waits 10 seconds and then calls &lt;code&gt;deferred.reject()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I found the CodeCatalyst promise-as3 documentation a little light, especially with regards to extracting the promise from the deferred, yet still calling resolve/reject on the deferred object. The magic that passes this on to the associated promise is the &lt;code&gt;Resolver&lt;/code&gt; built into the promise-as3 library. As the GitHub page notes…&lt;/p&gt;

&lt;p&gt;Each Deferred has an associated Resolver, and each Resolver has an associated Promise. A Deferred delegates resolve() and reject() calls to its Resolver’s resolve() and reject() methods. A Promise delegates then() calls to its Resolver’s then() method. In this way, access to Resolver operations are divided between producer (Deferred) and consumer (Promise) roles.&lt;/p&gt;

</description>
    </item>
    
    

  </channel>
</rss>